1. 객체와 클래스 
    1) 클래스
        -객체의 청사진(설계도)임.
        -객체를 만들어내기 위한 일종의 템플릿
        -'실체화'되어 있지 않으므로 메모리에 존재하지 않음
    2) 클래스는 객체를 프로그래밍에서 사용하려고 추상화(일반화)해서 기술해 놓은 설계도임.
    3) 프로그래밍에서 사용하려면 설계도(클래스)를 기초로 실체(객체)를 만들 필요가 있음.
        -실체화된 것을 객체(인스턴스)라고 함
        -실체화하는 작업을 객체(인스턴스)를 생성한다고 함.
    4) 클래스라는 설계도대로 구현한 것을 메모리(RAM)에 탑재해 메모리 주소를 부여한 것이 객체임.
        -객체는 클래스로부터 만들어지며 메모리를 차지함
        -최초에 만들어질 때는 자신을 초기화하는 '생성자(Constructor)'를 가짐.
         ->생성자를 굳이 내가 초기화하지 않더라도 자동적으로 초기화됨(0, null, 0.0 등)
        -new 키워드
            -객체가 생성되면 그 객체는 참조형이 되어 동적메모리 할당 공간(Heap)에 내용을 사용할 수 있음.
    5) 실제로 클래스를 객체로 만드는 코드는 아래와 같음
                 (참조)변수       생성자(생성자는 클래스와 이름이 같음)
        Student myStudent = new Student();
       클래스타입          객체생성 
        -> int a(Type 변수이름)를 클래스로 표현한 것으로 객체를 생성할 때 생성자를 생성해야 객체를 만들 수 있음.
        -Student 클래스의 Student() 생성자를 이용해서 new로 새로만들어서 생성된 객체를 메모리에 적재하고
         변수 myStudent에 대입시킴.
         ->객체를 만들 때 생성자를 호출해서 만듬.
    6) this: 객체 자기자신의 주소(참조변수)로 객체를 만들면 활성화 됨.
       super: 조상객체의 주소 
    7) 인스턴스(instance)
        -클래스는 객체의 속성을 정의하고, 기능을 구현하여 만들어 놓은 코드 상태
        -실제 클래스 기반으로 생성된 객체(인스턴스)는 각각 다른 멤버 변수 값을 가지게 됨
        -new 키워드를 사용하여 인스턴스 생성
        -생성된 인스턴스는 동적 메모리(heap memory)에 할당됨
        -자바에서 Garbage collector가 주기적으로 사용하지 않는 메모리를 수거함(heap의 객체 메모리가 제거됨)
        -하나의 클래스로부터 여러 개의 인스턴스가 생성되고 각각 다른 메모리 주소를 가지게 됨

2. 함수와 메서드 
    1) 함수(function)
        -하나의 기능을 수행하는 일련의 코드 
        -구현된(정의된) 함수는 호출하여 사용하고 호출된 함수는 기능이 끝나면 제어가 반환됨
        -함수로 구현된 하나의 기능은 여러 곳에서 동일한 방식으로 호출되어 사용될 수 있음
    2) 메서드(Method)
        -객체의 기능을 구현하기 위해 클래스 내부에 구현되는 함수
        -멤버 함수(member function)라고도 함
        -메서드 이름은 그 객체를 사용하는 객체(클라이언트)에 맞게 짓는 것이 좋음(ex: getStudentName())
    3) 오버로딩(overloading)
        -하나의 클래스 내에 매개변수 개수나 자료형은 다르지만 메서드명은 같은 메서드를 여러 개 정의하는 것.
        -동일하거나 유사한 일을 수행하는 메서드가 전달받는 매개변수에 따라 다른 연산을 하는 경우에 유용함.

3. OOP 3가지 개념
    1) 캡슐화(Encapsulation): 정보를 하나로 묶어주는 것
        ex: 클래스(속성과 동작을 묶어놓음)
    2) 추상화(Abstraction): 시스템의 세부사항 중에서 중요한(관심 있는)것과 중요하지 않은(관심 없는) 것을 가려내는 과정
    3) 정보 은폐(Information Hiding): 사용자가 알 필요없는 정보를 감추기

4. 정보(속성=변수) 은폐와 가시성(캡슐화)
    1) - (private): 나만 볼 수 있는 것.
                    같은 클래스 내부 에서만 접근 가능.
                    접근 제한을 했더라도 해당 멤버 변수를 사용할 수 있는 메서드를 제공해서 프로그램 의도에 
                    맞게 멤버 변수의 값을 사용하도록 유도할 수 있음.
                    =>setter(): private 멤버 변수에 값을 대입하는 메서드 
                      getter(): 값을 가져오는 메서드 
       + (public): 누구나 접근 가능 
                    외부 클래스 어디에서나 접근 가능 
       # (protected): 부모와 자식에게만 접근 가능 
                      상속 관게의 클래스에서만 접근 가능
       (아무것도 표시안함): 디폴트
                           같은 패키지 내부에서만 접근 가능 

5. 변수의 자료형
    1) 기본 자료형: int, long, float, double 등
    2) 참조 자료형
        -클래스형으로 변수를 선언
        -기본 자료형은 사용하는 메모리의 크기가 정해져 있지만 참조 자료형은 클래스에 따라 다름 
            ex: 학생이 수강한 과목들에 대한 성적을 산출하기 위한 경우
                -학생 클래스에 과목이 모두 있으면 비효율적인 설계 
                -학생(Student)과 과목(Sbject) 클래스를 분리하여 사용하는 설계 
                 ->Student클래스에 Subject 클래스를 활용한 변수 타입으로 선언

6. 객체간의 협력(collabration)
    1) OOP에서의 협력
        -객체간에 협력이 이루어짐 
        -협력을 위해서는 필요한 메세지를 전송하고 이를 처리하는 기능이 구현되어야 함
        -매개변수로 객체가 전달되는 경우가 발생