1. 제어문
    1) 프로그램의 진행 흐름을 필요에 따라 변경하고 싶을 때 사용함
    2) 프로그램은 코드가 입력된 순서대로 실행되는데 이렇게만 해서는 단순한 동작만 처리할 수 있음.
    3) 상황에 따라서는 연산결과에 따라 다른 동작을 수행하거나(if문=조건문) 동일한 처리를 반복해야 함(for문=반복문).

2. 조건문
    1) 조건식의 결과가 true인 경우와 false인 경우의 두 가지 흐름을 만들어낼 수 있음.
    2) if문을 사용한 조건 분기
       switch문을 사용한 조건 분기
    3) '재산이 1억 이상이면 100만원을 세금으로 내고 그렇지 않으면 내지 않는다'
        만약에(재산이 1억 이상이면){
            세금을 100만원 낸다
        } 그렇지 않으면{
            세금을 내지 않는다
        }

3. if문
    1) 단순 if문
            if(조건식){
                수행문;         //조건식이 참인 경우 수행문 수행
                                //조건식이 참이 아니면 수행문이 수행안됨
            }
    2) if ~ else문
            if(조건식){
                수행문1;        //조건식이 참인 경우에 수행됨
            } else{
                수행문2;        //조건식이 참이 아닌경우에 수행됨
            }
    3) if ~ else if ~ else문
        -하나의 상황에 대한 조건이 여러개로 나뉘고 각 조건에 다른 수행이 이루어져야 할 경우 사용
        -각 조건은 상호 배타적임
            if(조건식1){
                수행문1;    //조건식1이 참인 경우 수행하고 전체 조건문 빠져나감
            }else if(조건식2){
                수행문2;    //조건식2이 참인 경우 수행하고 전체 조건문 빠져나감
            }else if(조건문3){
                수행문3;    //조건식3이 참인 경우 수행하고 전체 조건문 빠져나감
            }else{
                수행문4;    //위 조건이 모두 해당되지 않는 경우 수행됨(디폴트 조건)
            }
            수행문5;
            ex: 가령 조건식2가 만족되면 수행문2이 실행된 후 실행문5가 실행된다.
         *validation: 정확한 값 범위를 사용하도록 하는 것(입력한 값의 범위를 체크해주는 것)
         			->값의 범위가 연속적이지 않고 띄엄띄엄 있을 때 사용
    4) 중첩 if문
        -무제한적으로 중첩 if문은 들어갈 수 있음.
        -보통 2개를 초과하지 않도록 하는게 가독성면에서 좋음.

4. switch-case문
    1) 조건이 여러 개일 때 간단히 표현됨
    2) if-else if-else문을 사용할 때 복잡한 부분을 가독성 좋게 구현
    3) break문을 사용하여 각 조건이 만족되면 switch블럭을 빠져나오도록 함
    4) 문법
        switch(조건식){
            case 1:
                처리 1;
                break;
            case 2:
                처리 2;
                break;
                .
                .
                .
            default:
                처리 n;
        }
        *default는 if문의 else와 비슷함.
         default에는 break를 써주지 않아도 됨
    5) java 14부터 좀 더 간결해진 표현식 지원됨
        -간단하게 쉼표(,)로 조건 부분
        -이 방식은 break를 필요로 하지 않음
        -switch 블럭 자체가 하나의 식으로 표현하여 반환값을 받을 수 있음
         (=switch가 변수의 값으로 작용할 수 있음).
            -yield 키원드 사용(=return의 개념과 비슷)
              ->반환값을 필요로하지 않으면 yield를 사용하지 않아도됨
                  int num;
                - int num1 = switch(조건식(=num)){
                             case x, y, z -> {
                             System.out.println();
                             yield num1의 변수값;
                             }
                             default -> {
                             System.out.println();
                             yield 0;
                             }
                         }
                - switch(조건식(=num)){
                    case x, y, z -> {
                        System.out.println();
                    }
                    default -> {
                        System.out.println();
                    }
                 }
