1. 자료구조 
    1) 배열
        -배열은 크기가 고정되어 있어 데이터를 추가하거나 삭제할 수 없음
        -변경시 새로 배열을 만들고 옮겨야 함
    2) 리스트
        -원소를 가리켜서 관리하는 자료구조임
        -데이터가 추가, 삭제될 때 연결하는 정보만 바꾸면 쉽게 추가, 삭제됨
    3) 스택(stack)
        -한쪽 끝에서만 자료를 넣거마 뺄 수 있는 선형 구조 
        -LIFO(Last In Fist Out)
        -밀어넣는다=>push
        -넣어둔 자료를 꺼낸다=>pop
        -가장 최근에 푸시한 자료부터 나오게 됨
        -맨 위 데이터부터 꺼냄
        -오래된 데이터가 제일 아래에 있음
    4) 큐(queue)
        -먼저 넣은 데이터가 먼저 나오는 구조 
        -FIFO(Fist In First Out)
        -계산대에 줄을 선 손님들의 행렬과 같은 것
    5) 트리 구조 
        -부모 노드 밑에 여러 자식 노드가 연결되고, 자식노드 각각에 다시 자식 노드가 연결되는 형태의 자료구조 
        -루트 노드(Root node)를 중심으로 뻗어나가는 모습이 나무의 구조와 비슷함
        -부모 노드와 자식 노드 간의 연결로 이루어진 자료구조 

2. 컬렉션 프레임워크 구조 
    1) Iterable<E> <----- Collection<E> <--- List<E>, Set<E>
                   <----- Map<K, V>
    2) List<E> 
        -순서가 있는 데이터 집합임
        -추가된 데이터의 순서도 유지되며, 데이터 중복을 허용함
        -객체를 순서에 따라 저장하고 관리하는데 필요한 메서드가 선언된 인터페이스
        -ArrayList, LinkedList, Stack, Queue, Vector
    3) Set<E>
        -데이터의 순서가 유지되지 않는 데이터 집합
        -데이터 중복이 허용되지 않음 
        -중북된 데이터를 add해도 제거됨->중복된 데이터가 제공됨
        -순서와 관계없이 중복을 허용하지 않아 유일한 값을 관리하는데 필요한 메서드가 선언됨
        -ex: 아이디, 주민번호, 사번 등
        -저장된 순서와 출력되는 순서는 다를 수 있음 
        -HashSet, TreeSet
    4) Map<K, V> 
        -키와 값으로 이루어진 데이터들의 집합
        -키(key)는 중복을 허용하지 않지만 값(value)은 중복될 수 있음
        -쌍(pair)으로 이루어진 객체를 관리하는데 사용하는 메서드들이 선언된 인터페이스 
        -객체는 key-value의 쌍으로 이루어져 있음
        -HashMap, TreeMap, Hashtable, Properties

3. Iterator 
    1) 컬렉션 프레임워크에 저장된 요소들을 하나씩 차례로 참조하는 기능 제공 
    2) 순서가 있는 List 인터페이스의 경우는 Iterator를 사용하지 않고 get(index)메서드를 활용할 수 있음
    3) Set 인터페이스의 경우 get()메서드가 제공되지 않으므로 Iterator를 활용하여 객체를 순회함
    4) 메서드 
        - boolean hasNext()
            -이후에 요소가 더 있는지를 체크하는 메서드
            -요소가 더 있다면 true를 반환
        -E next()
            -다음에 있는 요소를 반환

4. Set 인터페이스를 구현한 클래스
    1) 멤버의 중복 여부를 체크하기 위해 인스턴스의 (논리적인) 동일성을 확인해야 함
    2) 동일성 구현을 위해 필요에 따라 equals()와 hashCode() 메서드를 재정의 해야함
    3) TreeSet 클래스 활용
        -객체의 정렬에 사용되는 클래스
        -중복을 허용하지 않고, 오름차순이나 내림차순으로 객체를 정렬할 수 있음
        -내부적으로 이진검색트리로 구현됨
            -이진검색트리 저장하기 위해 add할 때 각 객체를 비교해야 함
            -비교 대상이 되는 객체에 Comparable이나 Comparator 인터페이스를 구현해야 TreeSet에 추가될 수 있음
                -String, Integer 등 JDK의 많은 클래스들이 이미 Comparable이 구현되어 있음

5. 트리(Tree)
    1) heap: Priority queue를 구현(우선 큐) //->데이터를 add할 때 queue 자료구조로 heap에 저장이 됨
    2) 이진 트리(binary tree)
        -부모 노드에 자식 노드가 두 개 이하인 트리
       이진 검색 트리(binary search tree)
        -자료(key)의 중복을 허용하지 않음
        -왼쪽 자식 노드는 부모 노드보다 작은 값, 오른쪽 자식 노드는 부모 노드보다 큰 값을 가짐
        -정렬을 지원함

6. HashMap 클래스 활용
    1) 쌍(pair)으로 자료를 관리함 
        -key -value를 쌍으로 관리하는 메서드를 구현함
    2) 가장 많이 사용되는 Map 인터페이스 기반 클래스 
    3) 검색을 위한 자료구조 
        -key를 이용하여 값을 저장하고 key를 이용하여 값을 꺼내오는 방식
    4) key가 되는 객체는 중복될 수 없고 (논리적인) 유일성을 비교를 위한 equals(), hashCode() 메서드를 구현해야 함
    