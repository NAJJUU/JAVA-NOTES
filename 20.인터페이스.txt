1. 인터페이스
    1) 모든 메서드가 추상 메서드로 선언됨
        -public abstract 생략됨(모든 메서드가 abstract이기 때문에)
    2) 모든 변수는 상수로 선언됨
        -public static final 생략됨
    3) interface 인터페이스이름 {
        public float pi = 3.14F;        //final 생략됨
        public void makeSomething();    //abstract 생략됨
       }
    4) 자바 8부터 디폴트 메서드(default method), 정적 메서드(static method)등 일부 구현 코드가 제공됨

2. 인터페이스 구현
    1) implements 예약어를 이용하여 코드를 작성함
        -class B implements A {}
        -클래스의 상속은 extends 예약어를 이용하고 인터페이스의 구현은 implements 예약어 이용 
        -다중 인터페이스 구현 가능(class B implements X, Y, Z{})
        -상속과 인터페이스를 동시에 사용 가능(class B extends A implements X, Y, Z{})
            -먼저 상속 표시를 해주고, 뒤에서 인터페이스를 필요만큼 표시해줌
        -인터페이스에 한해서 다중 상속도 됨(interface A extends X, Y, Z)

3. 인터페이스 역할
    1) 클래스나 프로그램이 제공하는 기능을 명시적으로 선언
    2) 일종의 클라이언트 코드와의 약속
    3) 클래스나 프로그램이 제공하는 명세(specification)
    4) 클라이언트 프로그램은 인터페이스에서 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있음
    5) 인터페이스를 구현한 다양한 객체를 사용함(다형성)

4. 인터페이스의 여러가지 요소
    1) 상수
        -모든 변수는 상수로 변환됨(public static final)
    2) 추상 메서드
        -모든 선언된 메서드는 추상 메서드(public abstract)
    3) 디폴트 메서드(java 8 이후)
        -구현을 가지는 메서드로 인터페이스를 구현하는 클래스들에서 공통으로 사용할 수 있는 기본 메서드 
        -default 키워드 사용
        -기존 인터페이스에 새로운 기능을 추가할 수 있음
        -구현하는 클래스에서 재정의 할 수 있음
    4) 정적(static) 메서드(java 8 이후)
        -인스턴스 생성과 상관없이 인스턴스 타입으로 사용할 수 있는 메서드 
    5) private 메서드(java 9 이후)
        -인터페이스를 implements한 클래스에서 사용하거나 재정의 할 수 없음
        -인터페이스 내부에서만 사용하기 위해서 구현하는 메서드 
         ->default 메서드나 static 메서드에서 사용함 

5. 여러 인터페이스 구현하기, 인터페이스의 상속
    1) 여러 인터페이스 구현하기 
        -자바의 인터페이스는 구현 코드가 없으므로 하나의 클래스가 여러 인터페이스를 구현할 수 있음
        -디폴트 메서드가 중복되는 경우는 클래스에서 재정의 하여야 함
    2) 인터페이스의 상속
        -인터페이스 사이에도 상속을 사용할 수 있음
        -extends 키원드를 사용
        -인터페이스는 다중 상속이 가능하고 구현 코드의 상속이 아니므로 타입 상속이라고 함
    3) 클래스 상속과 인터페이스 구현 함께 사용
        -프레임워크와 오픈소스(라이브러리)를 함께 연동되는 구현을 하게 됨
            -클래스 상속과 인터페이스 구현을 같이 사용하는 경우가 많음