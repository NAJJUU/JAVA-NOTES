1. Package java.lang
    1) 프로그래밍 시 import하지 않아도 자동으로 import 됨
    2) 많이 사용하는 기본 클래스들이 속한 패키지

2. java.lang.Object
    1) 모든 클래스는 Object 클래스를 상속 받음
    2) 모든 클래스의 최상위 클래스 
    3) Object 클래스의 메서드 중 일부(final이 아닌 것들)는 재정의해서 사용할 수 있음
    4) 컴파일러가 extends Object를 추가함 
    5) toString() 메서드 
        -객체의 정보를 String으로 바꾸어서 사용할 때 쓰임
        -String이나 Integer 클래스는 이미 재정의 되어있음 

3. 객체간의 논리적인 동등함
    -equals()와 hashcode() 둘다 Object의 메서드임
    1) equals() 메서드 
        -두 인스턴스의 주소 값을 비교하여 true/false를 반환
        -재정의하여 두 인스턴스가 논리적으로 동일함의 여부를 구현함
        -인스턴스가 다르더라도 논리적으로 동일한 경우 true를 반환하도록 재정의할 수 있음
    2) hashcode() 메서드 
        -객체의 해시 코드를 반환함(인스턴스의 저장 주소를 반환함)
        -힙메모리에 인스턴스가 저장되는 방식이 hash 방식
        -자료의 특정 값에 대한 저장 위치를 반환해주는 해시함수를 사용
    3) 두 인스턴스가 같다는 것
        -두 인스턴스에 대한 equals()의 반환 값이 true, hashcode() 값을 반환

4. String
    1) String 객체 선언(생성)
        -String str1 = new String("abc");   //인스턴스로 생성
        -String str2 = "abc";               //상수풀의 문자열
    2) String 클래스의 메서드       
        -concat(String str): 문자열 합치기
            -기존의 String 객체에 연결되는 것이 아니고 새로운 문자열이 생성됨 
            -메모리 낭비가 발생할 수 있음
            -한번 생성된 String 객체는 변경이 불가(불변, immutable)
             ->그래서 변경가능하도록 나온 것이 StringBuilder, StringBuffer이다.
        -indexOf(): 문자열에서 문자 찾기
        -substring(): 문자열 자르기
        -length(): 문자열 길이 구하기 
        -valueOf(기본형 타입): 기본 자료형의 값을 문자열로 바꾸기
        -contains(CharSequence s): 문자열 s를 포함하는지 조사함->반환타입: boolean
        -startsWith(String s): 시작하는 문자열이 s인지 조사함>반환타입: boolean
        -endsWith(String s): 끝나는 문자열이 s인지 조사함 >반환타입: boolean
        -isEmpty(): 문자열의 길이가 0이면 true 반환함>반환타입: boolean
        -toLowerCase(): 문자열을 모두 소문자로 변환함
        -toUpperCase(): 문자열을 모두 대문자로 변환함
        -trim(): 문자열 앞뒤에 있는 공백을 제거한 후 반환함

5. StringBuilder, StringBuffer 활용하기
    1) 내부적으로 가변적인 char[]를 멤버변수로 가짐 
    2) A mutable sequence of characters.
    3) 문자열을 여러번 연결하거나 변경할 때 사용하면 유용함
    4) 새로운 인스턴스를 생성하지 않고 기존의 char[]를 변경함
    5) 단일 thread 프로그램에서는 StringBuilder 사용을 권장
    6) StringBuffer는 멀티 thread 프로그래밍에서는 동기화(순서)를 보장함

6. text block(java 13부터 제공)
    1) 문자열을 """ """ 사이에 이어서 만들 수 있음
    2) html, json 문자열을 만드는데 사용할 수 있음

7. Class 클래스
    1) 자바의 모든 클래스와 인터페이스는 컴파일 후 class 파일이 생성됨
    2) Class 클래스는 컴파일된 class 파일을 로드하고, class 파일의 정보를 가져오는 메서드가 제공됨 
    3) 동적로딩
        -forName(String className)
        -실행(runtime) 중에 원하는 클래스를 로딩하여 binding할 수 있음
        -컴파일 시가 아니고 동적 로딩시 오류가 발생 시 프로그램의 장애가 발생할 수 있음
    4) newInstance()
        -인스턴스 생성
        -new 키워드를 사용하지 않고 클래스 정보를 활용하여 인스턴스 생성 
    5) 클래스 정보 알아보기
        -reflection 프로그래밍  
            -Class 클래스를 사용하여 클래스의 정보(생성자, 변수, 메서드)등을 알 수 있고, 인스턴스를 생성하고, 
             메서드를 호출하는 방식의 프로그래밍 
            -로컬 메모리에 객체가 없는 경우, 원격 프로그래밍, 객체의 타입을 알 수 없는 경우에 사용할 수 있음 
            -java.lang.reflect 패키지에 있는 클래스를 활용하여 프로그래밍 
            -일반적으로 자료형을 알고 있는 경우엔 사용하지 않음
